Ein_all[Ein_all==Ein_min]
which(Ein_all==Ein_min)
which(Ein_all==Ein_min,arr.ind=TRUE)
which(Ein_all==Ein_min,arr.ind=TRUE)$col
which(Ein_all==Ein_min,arr.ind=TRUE).col
which(Ein_all==Ein_min,arr.ind=TRUE)[2]
head(test)
test[,4]
Ein_all[,4]
train <- read.table('http://www.csie.ntu.edu.tw/~htlin/course/ml14fall/hw2/hw2_train.dat')
test <- read.table('http://www.csie.ntu.edu.tw/~htlin/course/ml14fall/hw2/hw2_test.dat')
x_index <- c(1:(ncol(train)-1))
y_index <- ncol(train)
Ein_all <- sapply(x_index,function(x) stump(train[,x],train[,y_index]))
Ein_min <- min(Ein_all[1,])
x_index_select <- which(Ein_all==Ein_min,arr.ind=TRUE)[2]
theta_select <- Ein_all[,x_index_select][3]
s_select <- Ein_all[,x_index_select][4]
theta_select
s_select
Ein_min
x_select <- test[,x_index_select]
x_select-theta_select
s_select*sign(x_select-theta_select)
x_select <- test[,x_index_select]
y_predict <- s_select*sign(x_select-theta_select)
y_predict!test[,y_index]
sum(y_predict!=test[,y_index])
sum(y_predict!=test[,y_index])/nrow(test)
stump_multi <- function(){
train <- read.table('http://www.csie.ntu.edu.tw/~htlin/course/ml14fall/hw2/hw2_train.dat')
test <- read.table('http://www.csie.ntu.edu.tw/~htlin/course/ml14fall/hw2/hw2_test.dat')
x_index <- c(1:(ncol(train)-1))
y_index <- ncol(train)
Ein_all <- sapply(x_index,function(x) stump(train[,x],train[,y_index]))
Ein_min <- min(Ein_all[1,])
x_index_select <- which(Ein_all==Ein_min,arr.ind=TRUE)[2]
theta_select <- Ein_all[,x_index_select][3]
s_select <- Ein_all[,x_index_select][4]
x_select <- test[,x_index_select]
y_predict <- s_select*sign(x_select-theta_select)
Etest <- sum(y_predict!=test[,y_index])/nrow(test)
c(Ein_min,Etest)
}
stump_multi()
library(plyr)
library(data.table)
choose <- c(1:5)
s <- c(1,-1)
library(plyr)
library(data.table)
choose <- c(1:5)
s <- c(1,-1)
stump <- function(x,y){
theta <- c(-2,sapply(2:length(x),function(a) x[a]-x[a-1]),2)
Ein <- ldply(theta,function(a){
result <- sum(sign(x-a)!=y)/length(x)
c(result,1-result)
})
Ein_min <- which(Ein==min(Ein),arr.ind=TRUE)
Ein_min_select <- Ein_min[sample(nrow(Ein_min),size=1),]
theta_select <- theta[Ein_min_select[1]]
s_select <- s[Ein_min_select[2]]
Eout <- (abs(theta_select)-1)*0.3*s_select+0.5
c(min(Ein),Eout,theta_select,s_select)
}
stump_with_sample <- function(n){
x <- runif(n,min=-1,max=1)
y <- sapply(x,function(a){
c <- sample(x=choose,size=1)
if(c<2) -sign(a) else sign(a)
})
stump(x,y)
}
stump_average_ein <- function(){
mean(sapply(1:5000,function(a) stump_with_sample(20)[1]))
}
stump_average_eout <- function(){
mean(sapply(1:5000,function(a) stump_with_sample(20)[2]))
}
stump_multi <- function(){
train <- read.table('http://www.csie.ntu.edu.tw/~htlin/course/ml14fall/hw2/hw2_train.dat')
test <- read.table('http://www.csie.ntu.edu.tw/~htlin/course/ml14fall/hw2/hw2_test.dat')
x_index <- c(1:(ncol(train)-1))
y_index <- ncol(train)
Ein_all <- sapply(x_index,function(x) stump(train[,x],train[,y_index]))
Ein_min <- min(Ein_all[1,])
x_index_select <- which(Ein_all==Ein_min,arr.ind=TRUE)[2]
theta_select <- Ein_all[,x_index_select][3]
s_select <- Ein_all[,x_index_select][4]
x_select <- test[,x_index_select]
y_predict <- s_select*sign(x_select-theta_select)
Etest <- sum(y_predict!=test[,y_index])/nrow(test)
c(Ein_min,Etest)
}
stump_average_ein()
stump_average_eout()
stump_multi()
stump_multi()[1]
stump_multi()[2]
r
R
matrix(c(1,1,1,1,1,2,4,8,1,3,9,27,1,4,16,4^3),nrow=4,ncol=4)
matrix(c(1,1,1,1,1,2,4,8,1,3,9,27,1,4,16,4^3),nrow=4,ncol=4,byrow=T)
a = matrix(c(1,1,1,1,1,2,4,8,1,3,9,27,1,4,16,4^3),nrow=4,ncol=4,byrow=T)
det(a)
a = matrix(c(1,1,1,1,1,2,4,8,1,3,9,27,1,4,16,4^3,1,5,25,5^3),nrow=5,ncol=4,byrow=T)
a
det(a)
a^-1
a*a^-1
a = matrix(c(1,2,4,8,1,3,9,27,1,4,16,4^3,1,5,25,5^3),nrow=4,ncol=4,byrow=T)
a
det(a0)
det(a)
a^-1
a = matrix(c(1,1,1,1,1,2,4,8,1,4,2^4,2^6,1,2^3,2^6,2^9),nrow=4,ncol=4,byrow=T)
a
det(a)
1008/512
a
t(a)
a%*%t(a)
a
100056*100056
1025439/100056*100056
1025439/(100056*100056)
setwd("~/Documents/Dropbox/NTU/Machine Learning/hw4")
library(data.table)
train_data <- fread('hw4_train.dat')
View(train_data)
train_x <- data.table(1,train_data$V1,train_data$V2)
View(train_x)
train_y <- train_data$V3
t(train_x)%*%train_x
train_x <- as.matrix(1,train_data$V1,train_data$V2)
View(train_x)
train_x <- as.matrix(data.table(1,train_data$V1,train_data$V2))
View(train_x)
t(train_x)%*%train_x
train_x%*%t(train_x)
lambda = 10
train_x%*%train_x+lambda*dign(3)
t(train_x)%*%train_x+lambda*dign(3)
diag(1)
t(train_x)%*%train_x+lambda*diag(3)
solve(t(train_x)%*%train_x+lambda*diag(3))
w_reg <- function(lambda) solve(t(train_x)%*%train_x+lambda*diag(3))%*%t(train_x)%*%train_y
w_reg(10)
w = w_reg(10)
pre <- train_x%*%w
pre
sign(pre)
pre<- sign(pre)
sum(pre!=train_y)
sum(pre!=train_y)/len(pre)
sum(pre!=train_y)/length(pre)
error_measure <- function(w,x,y){
pre <- sign(x%*%w)
sum(pre!=y)/length(pre)
}
w = w_reg(10)
train_data <- fread('hw4_train.dat')
test_data <- fread('hw4_test.dat')
train_x <- as.matrix(data.table(1,train_data$V1,train_data$V2))
train_y <- train_data$V3
test_x <- as.matrix(data.table(1,test_data$V1,test_data$V2))
test_y <- test_data$V3
w_reg <- function(lambda) solve(t(train_x)%*%train_x+lambda*diag(3))%*%t(train_x)%*%train_y
error_measure <- function(w,x,y){
pre <- sign(x%*%w)
sum(pre!=y)/length(pre)
}
w <- w_reg(10)
Ein <- error_measure(w,train_x,train_y)
error_measure(w,train_x,train_y)
w <- w_reg(10)
Ein <- error_measure(w,train_x,train_y)
Eout <- error_measure(w,test_x,test_y)
print(Ein,Eout)
Ein <- error_measure(w,train_x,train_y)
print(c(Ein,Eout))
l <- range(2,-10,1)
l <- range(2:-10,1)
2:-10
l <- 2:10
l <- 2:-10
lambda <- 10^l
lambda[1]
lambda[2]
lambda[3]
lambda[4]
w <- w_reg(lambda)
w <- sapply(lambda,function(x) w_reg(x))
w
w[0]
w[1]
w[,1]
sapply(w,function(x) print(x))
sapply(w,function(x) print('M') print(x))
sapply(w,function(x){print('M') print(x)})
sapply(w,function(x){print('M');print(x)})
w
len(w)
1:length(w)
ncol(w)
w[,1]
w = w[,1]
error_measure(w,train_x,train_y)
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],train_x,train_y) )
w <- sapply(lambda,function(x) w_reg(x))
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],train_x,train_y) )
l <- 2:-10
lambda <- 10^l
w <- sapply(lambda,function(x) w_reg(x))
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],train_x,train_y))
Eout <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
data.table(lambda,Ein,Eout)
result <- data.table(lambda,Ein,Eout)
min(result$Ein)
which(min(result$Ein))
?which
which(result==min(result$Ein))
?where
which(result$Ein==min(result$Ein))
result[which(result$Ein==min(result$Ein))]
result[which(result$Eout==min(result$Eout))]
train_x
train_x[1:120]
train_x[1:120,]
t_x = train_x[1:120,]
t_y = train_y[1:120]
v_x <- train_x[120:200,]
v_x <- train_x[121:200,]
w_reg <- function(lambda,x,y) solve(t(x)%*%x+lambda*diag(3))%*%t(x)%*%y
l <- 2:-10
lambda <- 10^l
w <- sapply(lambda,function(x) w_reg(x,train_x,train_y))
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],train_x,train_y))
Eout <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Ein,Eout)
result[which(result$Ein==min(result$Ein))]
result[which(result$Eout==min(result$Eout))]
t_x <- train_x[1:120,]
t_y <- train_y[1:120]
v_x <- train_x[121:200,]
v_y <- train_y[121:200]
w <- sapply(lambda,function(x) w_reg(x,_x,t_y))
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],t_x,t_y))
Eval <- sapply(1:ncol(w),function(x) error_measure(w[,x],v_x,v_y))
Eout <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Ein,Eval,Eout)
t_x <- train_x[1:120,]
t_y <- train_y[1:120]
v_x <- train_x[121:200,]
v_y <- train_y[121:200]
w <- sapply(lambda,function(x) w_reg(x,t_x,t_y))
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],t_x,t_y))
Eval <- sapply(1:ncol(w),function(x) error_measure(w[,x],v_x,v_y))
Eout <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Ein,Eval,Eout)
t_x <- train_x[1:120,]
t_y <- train_y[1:120]
v_x <- train_x[121:200,]
v_y <- train_y[121:200]
w <- sapply(lambda,function(x) w_reg(x,t_x,t_y))
Etrain <- sapply(1:ncol(w),function(x) error_measure(w[,x],t_x,t_y))
Eval <- sapply(1:ncol(w),function(x) error_measure(w[,x],v_x,v_y))
Etest <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Etrain,Eval,Etest)
result[which(result$Etrain==min(result$Etrain))]
result[which(result$Eval==min(result$Eval))]
result[which(result$Eval==min(result$Eval))][1]
l <- 2:-10
lambda <- 10^l
w <- sapply(lambda,function(x) w_reg(x,train_x,train_y))
Ein <- sapply(1:ncol(w),function(x) error_measure(w[,x],train_x,train_y))
Eout <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Ein,Eout)
result[which(result$Ein==min(result$Ein))][1]
result[which(result$Eout==min(result$Eout))][1]
t_x <- train_x[1:120,]
t_y <- train_y[1:120]
v_x <- train_x[121:200,]
v_y <- train_y[121:200]
w <- sapply(lambda,function(x) w_reg(x,t_x,t_y))
Etrain <- sapply(1:ncol(w),function(x) error_measure(w[,x],t_x,t_y))
Eval <- sapply(1:ncol(w),function(x) error_measure(w[,x],v_x,v_y))
Etest <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Etrain,Eval,Etest)
result[which(result$Etrain==min(result$Etrain))][1]
result[which(result$Eval==min(result$Eval))][1]
result[which(result$Eval==min(result$Eval))][1][1]
result[which(result$Eval==min(result$Eval))][1]$lambda
lambda_best <- result[which(result$Eval==min(result$Eval))][1]$lambda
w <- w_reg(lambda_best,train_x,train_y)
lambda_best <- result[which(result$Eval==min(result$Eval))][1]$lambda
w <- w_reg(lambda_best,train_x,train_y)
Ein <- error_measure(w,train_x,train_y)
Eout <- error_measure(w,test_x,test_y)
print(c(Ein,Eout))
split(1:10,1:2)
a = split(1:10,1:2)
a[1]
splitseq(1:10,2)
strsplit(1:10,2)
strsplit(str(1:10),2)
1:200
split(1:200,1:5)
split(1:200,1:5)[1]
train_x[split(1:200,1:5)[1]]
train_x[split(1:200,1:5)[1][1]]
split(1:200,1:5)[1][1]
split(1:200,1:5)$1
split(1:200,1:5)$`1`1
split(1:200,1:5)$`1`
split(1:200,1:5)$`2`
split(1:200,1:5)$`3`
split(1:200,1:5)$`4`
sapply(split(1:200,1:5),function(x) print(x))
split(1:200,1:5)$`1`
train_x[split(1:200,1:5)$`1`]
train_x[split(1:200,1:5)$`1`,]
train_x[-split(1:200,1:5)$`1`,]
lambda
w = lambda[1]
Ecv <- sapply(split(1:200,1:5),function(x){
val_x <- train_x[x,]
tra_x <- train_x[-x,]
val_y <- train_y[x]
tra_y <- train_y[-x]
w <- w_reg(w,tra_x,tra_y)
error_measure(w,val_x,val_y)
})
mean(Ecv)
lambda
Ecv <- sapply(lambda,function(x) Ecv_measure(x))
Ecv_measure <- function(w){
Ecv <- sapply(split(1:200,1:5),function(x){
val_x <- train_x[x,]
tra_x <- train_x[-x,]
val_y <- train_y[x]
tra_y <- train_y[-x]
w <- w_reg(w,tra_x,tra_y)
error_measure(w,val_x,val_y)
})
mean(Ecv)
}
Ecv <- sapply(lambda,function(x) Ecv_measure(x))
result <- data.table(lambda,Ecv)
result
result[which(result$Ecv==min(result$Ecv))][1]
range(1:200,5)
seq_along(1:200)
seq_along(1:200)/40
split(1:200,ceiling(1:200/40))
Ecv_measure <- function(w){
Ecv <- sapply(split(1:200,ceiling(1:200/40)),function(x){
val_x <- train_x[x,]
tra_x <- train_x[-x,]
val_y <- train_y[x]
tra_y <- train_y[-x]
w <- w_reg(w,tra_x,tra_y)
error_measure(w,val_x,val_y)
})
mean(Ecv)
}
Ecv <- sapply(lambda,function(x) Ecv_measure(x))
result <- data.table(lambda,Ecv)
result[which(result$Ecv==min(result$Ecv))][1]
ceiling(1:200/40)
lambda_best <- result[which(result$Ecv==min(result$Ecv))][1]$lambda
w <- w_reg(lambda_best,train_x,train_y)
Ein <- error_measure(w,train_x,train_y)
Eout <- error_measure(w,test_x,test_y)
print(c(Ein,Eout))
evaluate <- function(lambda){
w <- w_reg(lambda,train_x,train_y)
Ein <- error_measure(w,train_x,train_y)
Eout <- error_measure(w,test_x,test_y)
print(c(Ein,Eout))
}
evaluate(10)
evaluate <- function(lambda){
w <- w_reg(lambda,train_x,train_y)
Ein <- error_measure(w,train_x,train_y)
Eout <- error_measure(w,test_x,test_y)
c(Ein,Eout)
}
evaluate(10)
l <- 2:-10
lambda <- 10^l
sapply(lambda,function(x) evaluate(x))
error <- sapply(lambda,function(x) evaluate(x))
data.table(lambda,error)
data.table(lambda,t(error))
data.table(lambda,t(error))
l <- 2:-10
lambda <- 10^l
error <- sapply(lambda,function(x) evaluate(x))
result <- data.table(lambda,t(error))
result[which(result$Ein==min(result$V1))][1]
data.table(lambda,t(error))
result[which(result$V1==min(result$V1))][1]
result[which(result$V2==min(result$V2))][1]
library(data.table)
train_data <- fread('hw4_train.dat')
test_data <- fread('hw4_test.dat')
train_x <- as.matrix(data.table(1,train_data$V1,train_data$V2))
train_y <- train_data$V3
test_x <- as.matrix(data.table(1,test_data$V1,test_data$V2))
test_y <- test_data$V3
w_reg <- function(lambda,x,y) solve(t(x)%*%x+lambda*diag(3))%*%t(x)%*%y
error_measure <- function(w,x,y){
pre <- sign(x%*%w)
sum(pre!=y)/length(pre)
}
evaluate <- function(lambda){
w <- w_reg(lambda,train_x,train_y)
Ein <- error_measure(w,train_x,train_y)
Eout <- error_measure(w,test_x,test_y)
c(Ein,Eout)
}
evaluate(10)
l <- 2:-10
lambda <- 10^l
error <- sapply(lambda,function(x) evaluate(x))
result <- data.table(lambda,t(error))
result[which(result$V1==min(result$V1))][1]
result[which(result$V2==min(result$V2))][1]
t_x <- train_x[1:120,]
t_y <- train_y[1:120]
v_x <- train_x[121:200,]
v_y <- train_y[121:200]
w <- sapply(lambda,function(x) w_reg(x,t_x,t_y))
Etrain <- sapply(1:ncol(w),function(x) error_measure(w[,x],t_x,t_y))
Eval <- sapply(1:ncol(w),function(x) error_measure(w[,x],v_x,v_y))
Etest <- sapply(1:ncol(w),function(x) error_measure(w[,x],test_x,test_y))
result <- data.table(lambda,Etrain,Eval,Etest)
result[which(result$Etrain==min(result$Etrain))][1]
result[which(result$Eval==min(result$Eval))][1]
Ecv_measure <- function(w){
Ecv <- sapply(split(1:200,ceiling(1:200/40)),function(x){
val_x <- train_x[x,]
tra_x <- train_x[-x,]
val_y <- train_y[x]
tra_y <- train_y[-x]
w <- w_reg(w,tra_x,tra_y)
error_measure(w,val_x,val_y)
})
mean(Ecv)
}
Ecv <- sapply(lambda,function(x) Ecv_measure(x))
result <- data.table(lambda,Ecv)
result[which(result$Ecv==min(result$Ecv))][1]
lambda_best <- result[which(result$Ecv==min(result$Ecv))][1]$lambda
evaluate(lambda_best)
0.5^2
0.5^2*2
0.5^2
t <- function(p){
2/sqrt((p-1)^2+1) + 2/sqrt((p+1)^2+1)
}
test <- function(p){
2/sqrt((p-1)^2+1) + 2/sqrt((p+1)^2+1)
}
test(sqrt(sqrt(3)+4))
test(sqrt(sqrt(3)-1))
test(sqrt(sqrt(3)+4))
test(sqrt(sqrt(3)-1))
test(sqrt(9+4*sqrt(6)))
test(sqrt(9-sqrt(6)))
test <- function(p){
4/((p-1)^2+1) + 4/((p+1)^2+1)
}
test(sqrt(sqrt(3)+4))
test(sqrt(sqrt(3)-1))
test(sqrt(9+4*sqrt(6)))
test(sqrt(9-sqrt(6)))
library(slidify)
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("hyiiego")
setwd("~/Documents/Dropbox/NTU/SNA/hw2/report")
author("hyiiego")
author("hw2_present")
degree <- fread('.../result.csv')
degree <- fread('../../result.csv')
path
wd
getwd()
setwd("~/Documents/Dropbox/NTU/SNA/hw2/report/hw2_present")
plot()
plot(' ')
qplot()
library(ggplot2)
qplot()
qplot(env=' ')
publish('hw2_present')
publish('hw2_present','present_demo')
publish('hyiiego','present_demo')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
publish('present_demo','hyiiego')
